Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and local ssh
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install docker
          # apt-get update
          # apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          # add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          # apt-get update
          # apt-get install -y docker-ce
          # mkdir docker-test
          # cd docker-test
          # wget https://udacity-cloud-nanodegree-p2.s3-us-west-2.amazonaws.com/data.zip
          # apt-get install unzip
          # unzip data.zip
          # echo "FROM ubuntu:latest" >> Dockerfile
          # echo "RUN apt-get update" >> Dockerfile
          # echo "RUN apt-get install -y nodejs" >> Dockerfile
          # echo "RUN apt-get install -y npm" >> Dockerfile
          # echo "RUN npm install -g http-server" >> Dockerfile
          # echo "WORKDIR /usr/apps/test-docker/" >> Dockerfile
          # echo "COPY index.html /usr/apps/test-docker/" >> Dockerfile
          # echo 'CMD ["http-server", "-s"]' >> Dockerfile
          # docker build -t "test:test-docker" .
          # usermod -aG docker ubuntu
          # docker run -d -p 8080:8080 "test:test-docker"
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Hello Udacity!" > index.html
          aws s3 cp s3://udagram-project-demo/udacity.zip .
          unzip -o udacity.zip
      # AssociatePublicIpAddress: Boolean
      # ClassicLinkVPCId: String
      # ClassicLinkVPCSecurityGroups: 
      #   - String
      # EbsOptimized: Boolean
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      ImageId: ami-005bdb005fb00e791
      # InstanceId: String
      # InstanceMonitoring: Boolean
      # KernelId: String
      KeyName: my-key
      # LaunchConfigurationName: String
      # PlacementTenancy: String
      # RamDiskId: String
      SecurityGroups: 
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      # SpotPrice: String
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: "10"
  
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: 
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
          
Outputs:
  LoadBalancerDNSName:
    Description: The DNSName of the load balancer
    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNSName
